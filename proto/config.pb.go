// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: config.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server     *Config_Server     `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Index      *Config_Index      `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	BlockCache *Config_BlockCache `protobuf:"bytes,3,opt,name=block_cache,json=blockCache,proto3" json:"block_cache,omitempty"`
	Data       *Config_Data       `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetServer() *Config_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config) GetIndex() *Config_Index {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Config) GetBlockCache() *Config_BlockCache {
	if x != nil {
		return x.BlockCache
	}
	return nil
}

func (x *Config) GetData() *Config_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Config_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server address in host:port format, i.e. "0.0.0.0:6379".
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The log level of the server; possible values are debug, info, warn, error.
	LogLevel string `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// The log handler type; possible values are json, text.
	LogHandler string `protobuf:"bytes,3,opt,name=log_handler,json=logHandler,proto3" json:"log_handler,omitempty"`
}

func (x *Config_Server) Reset() {
	*x = Config_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Server) ProtoMessage() {}

func (x *Config_Server) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Server.ProtoReflect.Descriptor instead.
func (*Config_Server) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_Server) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Config_Server) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Config_Server) GetLogHandler() string {
	if x != nil {
		return x.LogHandler
	}
	return ""
}

type Config_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The false positive rate of each data block's bloom filter index; must be between 0 and 1.
	BfFalsePositiveRate float64 `protobuf:"fixed64,1,opt,name=bf_false_positive_rate,json=bfFalsePositiveRate,proto3" json:"bf_false_positive_rate,omitempty"`
	// The minimum number of keys in a data block to create a bloom filter index for it.
	BfMinKeys int64 `protobuf:"varint,2,opt,name=bf_min_keys,json=bfMinKeys,proto3" json:"bf_min_keys,omitempty"`
}

func (x *Config_Index) Reset() {
	*x = Config_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Index) ProtoMessage() {}

func (x *Config_Index) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Index.ProtoReflect.Descriptor instead.
func (*Config_Index) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_Index) GetBfFalsePositiveRate() float64 {
	if x != nil {
		return x.BfFalsePositiveRate
	}
	return 0
}

func (x *Config_Index) GetBfMinKeys() int64 {
	if x != nil {
		return x.BfMinKeys
	}
	return 0
}

type Config_BlockCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable the block cache.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// The maximum number of key values in the block cache; if zero or negative, block caching is disabled.
	Capacity int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The total number of shards in the block cache; if zero or negative, cache sharding is disabled.
	ShardCount int64 `protobuf:"varint,3,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// Interval in duration format (e.g. 1s or 25m) that the block cache sweeps happen.
	TickInterval string `protobuf:"bytes,4,opt,name=tick_interval,json=tickInterval,proto3" json:"tick_interval,omitempty"`
	// Time-to-live in duration format (e.g. 1s or 25m) for each block cache entry.
	Ttl string `protobuf:"bytes,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *Config_BlockCache) Reset() {
	*x = Config_BlockCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_BlockCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_BlockCache) ProtoMessage() {}

func (x *Config_BlockCache) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_BlockCache.ProtoReflect.Descriptor instead.
func (*Config_BlockCache) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Config_BlockCache) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Config_BlockCache) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Config_BlockCache) GetShardCount() int64 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *Config_BlockCache) GetTickInterval() string {
	if x != nil {
		return x.TickInterval
	}
	return ""
}

func (x *Config_BlockCache) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

type Config_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The directory that data is stored at.
	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	// The temporary folder used for compactions and other temporary written files.
	TempFolder string `protobuf:"bytes,2,opt,name=temp_folder,json=tempFolder,proto3" json:"temp_folder,omitempty"`
	// The size threshold in number of key values to trigger a memtable flush.
	BlockFlushSize int64 `protobuf:"varint,3,opt,name=block_flush_size,json=blockFlushSize,proto3" json:"block_flush_size,omitempty"`
	// The size threshold in bytes to trigger a memtable flush.
	BlockFlushSizeBytes int64 `protobuf:"varint,4,opt,name=block_flush_size_bytes,json=blockFlushSizeBytes,proto3" json:"block_flush_size_bytes,omitempty"`
}

func (x *Config_Data) Reset() {
	*x = Config_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Data) ProtoMessage() {}

func (x *Config_Data) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Data.ProtoReflect.Descriptor instead.
func (*Config_Data) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Config_Data) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *Config_Data) GetTempFolder() string {
	if x != nil {
		return x.TempFolder
	}
	return ""
}

func (x *Config_Data) GetBlockFlushSize() int64 {
	if x != nil {
		return x.BlockFlushSize
	}
	return 0
}

func (x *Config_Data) GetBlockFlushSizeBytes() int64 {
	if x != nil {
		return x.BlockFlushSizeBytes
	}
	return 0
}

var file_config_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50001,
		Name:          "kiwi.flag_name",
		Tag:           "bytes,50001,opt,name=flag_name",
		Filename:      "config.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// The string value will be the name of the command-line flag.
	//
	// optional string flag_name = 50001;
	E_FlagName = &file_config_proto_extTypes[0]
)

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x6b, 0x69, 0x77, 0x69, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x77, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6b, 0x69, 0x77, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x69, 0x77, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x69, 0x77, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x92, 0x01, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x8a, 0xb5, 0x18, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x8a, 0xb5, 0x18, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x8a, 0xb5,
	0x18, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x1a, 0x9d,
	0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x59, 0x0a, 0x16, 0x62, 0x66, 0x5f, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x24, 0x8a, 0xb5, 0x18, 0x20, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x62, 0x66, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x66, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x62, 0x6c,
	0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x52, 0x09, 0x62, 0x66, 0x4d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x9b,
	0x02, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x8a,
	0xb5, 0x18, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x18, 0x8a, 0xb5, 0x18, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1b, 0x8a, 0xb5, 0x18, 0x17, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x8a, 0xb5, 0x18, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x1a, 0xef, 0x01, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0x8a, 0xb5, 0x18, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x8a, 0xb5, 0x18, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x17, 0x8a, 0xb5, 0x18, 0x13, 0x6d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0x8a, 0xb5, 0x18, 0x19,
	0x6d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x3a, 0x3c,
	0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x22, 0x5a, 0x20,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x2f, 0x6b, 0x69, 0x77, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_config_proto_goTypes = []interface{}{
	(*Config)(nil),                    // 0: kiwi.Config
	(*Config_Server)(nil),             // 1: kiwi.Config.Server
	(*Config_Index)(nil),              // 2: kiwi.Config.Index
	(*Config_BlockCache)(nil),         // 3: kiwi.Config.BlockCache
	(*Config_Data)(nil),               // 4: kiwi.Config.Data
	(*descriptorpb.FieldOptions)(nil), // 5: google.protobuf.FieldOptions
}
var file_config_proto_depIdxs = []int32{
	1, // 0: kiwi.Config.server:type_name -> kiwi.Config.Server
	2, // 1: kiwi.Config.index:type_name -> kiwi.Config.Index
	3, // 2: kiwi.Config.block_cache:type_name -> kiwi.Config.BlockCache
	4, // 3: kiwi.Config.data:type_name -> kiwi.Config.Data
	5, // 4: kiwi.flag_name:extendee -> google.protobuf.FieldOptions
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_BlockCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		MessageInfos:      file_config_proto_msgTypes,
		ExtensionInfos:    file_config_proto_extTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
