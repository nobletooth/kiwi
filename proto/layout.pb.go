// This protobuf file describes the layout of data storage for Kiwi.
// The storage layout follows an LSM-Tree like structure, consisting of these types:
// 1. Table: Equivalent to a Redis DB; Kiwi makes a separate folder per table.
// 2. Part : Each table's data is separated into multiple parts (SSTables); each part is an immutable file containing
//           an indexed list of keys and values. Parts are named using incremental integers starting from 1.
//           Each part points to its previous parts, allowing backward iterations.
//           When the Kiwi memory table is full, it is flushed to disk as a new part.
//
//  Parts are self-contained files with the following structure:
//  - Header: Metadata about the part, including offsets to data sections within the file.
//            Each header file is small enough to be fully loaded into memory, and contains two indexes:
//            Skip index, which is a sparse index of the first key of each block and its offsets.
//            BF index, an optional Bloom filter for quick key existence checks per each block.
//  - Data  : Actual key-value pairs stripped of their common prefixes, organized in blocks.
//            Each block contains a list of keys and their corresponding values, sorted by key.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: layout.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: Since keeping the reference to the next part needs disk updates, we don't do that.
	Id        int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // Part's ID; sorted by time; File's name is <id>.part
	PrevPart  int64                        `protobuf:"varint,2,opt,name=prev_part,json=prevPart,proto3" json:"prev_part,omitempty"`   // ID of the previous part; zero if this is the first part.
	SkipIndex *PartHeader_SkipIndex        `protobuf:"bytes,3,opt,name=skip_index,json=skipIndex,proto3" json:"skip_index,omitempty"` // In-memory skip index for the entire part.
	BfIndex   *PartHeader_BloomFilterIndex `protobuf:"bytes,4,opt,name=bf_index,json=bfIndex,proto3" json:"bf_index,omitempty"`       // In-memory Bloom filter for the entire part (optional).
}

func (x *PartHeader) Reset() {
	*x = PartHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layout_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartHeader) ProtoMessage() {}

func (x *PartHeader) ProtoReflect() protoreflect.Message {
	mi := &file_layout_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartHeader.ProtoReflect.Descriptor instead.
func (*PartHeader) Descriptor() ([]byte, []int) {
	return file_layout_proto_rawDescGZIP(), []int{0}
}

func (x *PartHeader) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PartHeader) GetPrevPart() int64 {
	if x != nil {
		return x.PrevPart
	}
	return 0
}

func (x *PartHeader) GetSkipIndex() *PartHeader_SkipIndex {
	if x != nil {
		return x.SkipIndex
	}
	return nil
}

func (x *PartHeader) GetBfIndex() *PartHeader_BloomFilterIndex {
	if x != nil {
		return x.BfIndex
	}
	return nil
}

// The data section contains multiple data blocks, each structured as follows:
type DataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`     // The key without the common prefix mentioned in SkipIndex.
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"` // The corresponding value for each key.
}

func (x *DataBlock) Reset() {
	*x = DataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layout_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlock) ProtoMessage() {}

func (x *DataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_layout_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlock.ProtoReflect.Descriptor instead.
func (*DataBlock) Descriptor() ([]byte, []int) {
	return file_layout_proto_rawDescGZIP(), []int{1}
}

func (x *DataBlock) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DataBlock) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type PartHeader_SkipIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes     [][]byte `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`                                     // Common prefix for all keys in each data block; May be empty.
	FirstKey     []byte   `protobuf:"bytes,2,opt,name=first_key,json=firstKey,proto3" json:"first_key,omitempty"`                     // The first key in the whole data blocks (including the common prefix).
	LastKey      []byte   `protobuf:"bytes,3,opt,name=last_key,json=lastKey,proto3" json:"last_key,omitempty"`                        // The last key in the whole data blocks (including the common prefix).
	BlockOffsets []int64  `protobuf:"varint,4,rep,packed,name=block_offsets,json=blockOffsets,proto3" json:"block_offsets,omitempty"` // Relative offset to the start of each data block in the data section.
}

func (x *PartHeader_SkipIndex) Reset() {
	*x = PartHeader_SkipIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layout_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartHeader_SkipIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartHeader_SkipIndex) ProtoMessage() {}

func (x *PartHeader_SkipIndex) ProtoReflect() protoreflect.Message {
	mi := &file_layout_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartHeader_SkipIndex.ProtoReflect.Descriptor instead.
func (*PartHeader_SkipIndex) Descriptor() ([]byte, []int) {
	return file_layout_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PartHeader_SkipIndex) GetPrefixes() [][]byte {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *PartHeader_SkipIndex) GetFirstKey() []byte {
	if x != nil {
		return x.FirstKey
	}
	return nil
}

func (x *PartHeader_SkipIndex) GetLastKey() []byte {
	if x != nil {
		return x.LastKey
	}
	return nil
}

func (x *PartHeader_SkipIndex) GetBlockOffsets() []int64 {
	if x != nil {
		return x.BlockOffsets
	}
	return nil
}

type PartHeader_BloomFilterIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumBits      int64  `protobuf:"varint,1,opt,name=num_bits,json=numBits,proto3" json:"num_bits,omitempty"`                  // Number of bits in the Bloom filter.
	NumHashFuncs int32  `protobuf:"varint,2,opt,name=num_hash_funcs,json=numHashFuncs,proto3" json:"num_hash_funcs,omitempty"` // Number of hash functions used.
	BitArray     []byte `protobuf:"bytes,3,opt,name=bit_array,json=bitArray,proto3" json:"bit_array,omitempty"`                // Bit array representing the Bloom filter.
}

func (x *PartHeader_BloomFilterIndex) Reset() {
	*x = PartHeader_BloomFilterIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layout_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartHeader_BloomFilterIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartHeader_BloomFilterIndex) ProtoMessage() {}

func (x *PartHeader_BloomFilterIndex) ProtoReflect() protoreflect.Message {
	mi := &file_layout_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartHeader_BloomFilterIndex.ProtoReflect.Descriptor instead.
func (*PartHeader_BloomFilterIndex) Descriptor() ([]byte, []int) {
	return file_layout_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PartHeader_BloomFilterIndex) GetNumBits() int64 {
	if x != nil {
		return x.NumBits
	}
	return 0
}

func (x *PartHeader_BloomFilterIndex) GetNumHashFuncs() int32 {
	if x != nil {
		return x.NumHashFuncs
	}
	return 0
}

func (x *PartHeader_BloomFilterIndex) GetBitArray() []byte {
	if x != nil {
		return x.BitArray
	}
	return nil
}

var File_layout_proto protoreflect.FileDescriptor

var file_layout_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x6b, 0x69, 0x77, 0x69, 0x22, 0xab, 0x03, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x69, 0x77, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x08, 0x62,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6b, 0x69, 0x77, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x07, 0x62, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x84, 0x01, 0x0a, 0x09, 0x53, 0x6b,
	0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x1a, 0x70, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x73, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x69, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x22, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x22, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x2f, 0x6b, 0x69, 0x77, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layout_proto_rawDescOnce sync.Once
	file_layout_proto_rawDescData = file_layout_proto_rawDesc
)

func file_layout_proto_rawDescGZIP() []byte {
	file_layout_proto_rawDescOnce.Do(func() {
		file_layout_proto_rawDescData = protoimpl.X.CompressGZIP(file_layout_proto_rawDescData)
	})
	return file_layout_proto_rawDescData
}

var file_layout_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_layout_proto_goTypes = []interface{}{
	(*PartHeader)(nil),                  // 0: kiwi.PartHeader
	(*DataBlock)(nil),                   // 1: kiwi.DataBlock
	(*PartHeader_SkipIndex)(nil),        // 2: kiwi.PartHeader.SkipIndex
	(*PartHeader_BloomFilterIndex)(nil), // 3: kiwi.PartHeader.BloomFilterIndex
}
var file_layout_proto_depIdxs = []int32{
	2, // 0: kiwi.PartHeader.skip_index:type_name -> kiwi.PartHeader.SkipIndex
	3, // 1: kiwi.PartHeader.bf_index:type_name -> kiwi.PartHeader.BloomFilterIndex
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_layout_proto_init() }
func file_layout_proto_init() {
	if File_layout_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layout_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layout_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layout_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartHeader_SkipIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layout_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartHeader_BloomFilterIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layout_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layout_proto_goTypes,
		DependencyIndexes: file_layout_proto_depIdxs,
		MessageInfos:      file_layout_proto_msgTypes,
	}.Build()
	File_layout_proto = out.File
	file_layout_proto_rawDesc = nil
	file_layout_proto_goTypes = nil
	file_layout_proto_depIdxs = nil
}
